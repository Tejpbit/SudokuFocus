package dev.fredag.sudokufocus.datastore

import androidx.room.*
import dev.fredag.sudokufocus.model.Sudoku
import dev.fredag.sudokufocus.model.SudokuSource
import kotlinx.coroutines.flow.Flow

@Entity
data class SudokuEntity(
    @ColumnInfo(name = "sudoku") val sudoku: Sudoku,
    @ColumnInfo(name = "source") val source: SudokuSource,
    @ColumnInfo(name = "tag") val tag: String,
    @ColumnInfo(name = "created_at") val createdAt: Long = System.currentTimeMillis(),
    @ColumnInfo(name = "modified_at") val modifiedAt: Long = System.currentTimeMillis(),
    @ColumnInfo(name = "finished_at") val finished_at: Long? = null,
    @PrimaryKey(autoGenerate = true) val uid: Int = 0, // So we don't have to pass it in the constructor. It'll be autogenerated
)


@Dao
abstract class SudokuDao {
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    abstract fun insert(data: SudokuEntity)

    fun insertWithTimestamp(data: SudokuEntity) {
        insert(data.copy(createdAt = System.currentTimeMillis(), modifiedAt = System.currentTimeMillis()))
    }

    @Update
    abstract fun update(data: SudokuEntity)

    fun updateWithTimestamp(data: SudokuEntity) {
        insert(data.copy(modifiedAt = System.currentTimeMillis()))
    }

    @Query("SELECT *, max(modified_at) FROM sudokuentity")
    abstract fun getLastModifiedSudoku(): Flow<SudokuEntity?>

    @Query("SELECT * FROM sudokuentity  WHERE  finished_at IS NULL ORDER BY modified_at DESC")
    abstract fun getOngoing(): Flow<List<SudokuEntity>>

    @Query("SELECT * FROM sudokuentity")
    abstract fun getAll(): Flow<List<SudokuEntity>>

    @Query("SELECT * FROM sudokuentity WHERE source LIKE :source")
    abstract fun findBySource(source: SudokuSource): Flow<List<SudokuEntity>>

    @Query("SELECT *, max(modified_at) FROM sudokuentity WHERE source LIKE :source")
    abstract fun findLastModifiedBySource(source: SudokuSource): Flow<SudokuEntity?>

    @Query("SELECT COUNT(*) FROM sudokuentity WHERE source LIKE :source")
    abstract fun numberOfGamesForSource(source: SudokuSource): Int

    @Delete
    abstract fun delete(sudokuEntity: SudokuEntity)

}


@Database(entities = [SudokuEntity::class], version = 1)
@TypeConverters(SudokuConverter::class, SudokuSourceConverter::class)
abstract class AppDatabase : RoomDatabase() {
    abstract fun sudokuDao(): SudokuDao
}
